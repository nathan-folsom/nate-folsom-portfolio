{
  "service": "interface Effect<T> {\n    matcher: string[];\n    cb: StatefulCallback<T>;\n}\n\ntype StatefulCallback<T> = (url: string[]) => T;\ntype StatelessCallback = (url?: string[]) => void;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PageStateFromUrlService {\n    private urlHandler: UrlHandler<any>;\n    private baseRoute: string;\n\n    constructor(private router: Router) {\n    }\n\n    public register = <T>(\n        defaultState: T,\n        effects: Effect<T>[],\n        statelessEffects?: StatelessCallback[]\n    ): Observable<T> => {\n        this.baseRoute = this.getBaseRoute();\n        this.urlHandler = new UrlHandler<T>(this.getUrlSegments$(), defaultState, effects, statelessEffects);\n        return this.urlHandler.getState$();\n    }\n\n    protected getBaseRoute = () => this.splitUrl(this.router.routerState.snapshot.url)[2];\n\n    protected getUrlSegments$ = () => this.getUrlFromEvents$().pipe(\n        map((c: string) => this.splitUrl(c)),\n        map((url) => this.getChildRoutes(url)),\n    )\n\n    protected getUrlFromEvents$ = () => this.router.events.pipe(\n        filter((e) => e instanceof NavigationEnd),\n        map((e) => (e as NavigationEnd).url),\n        startWith(this.router.routerState.snapshot.url),\n    )\n\n    protected splitUrl = (url: string): string[] => url.split('/');\n\n    protected getChildRoutes = (url: string[]): string[] => {\n        try {\n            return url.slice(url.indexOf(this.baseRoute) + 1);\n        } catch {\n            return [''];\n        }\n    }\n}",
  "class": "class UrlHandler<T> {\n    private urls$: Observable<string[]>;\n    private effects: Effect<T>[] = [];\n    private statelessEffects: StatelessCallback[] = [];\n    private readonly defaultState: T;\n\n    constructor(urls$: Observable<string[]>, defaultState: T, effects: Effect<T>[], statelessEffects?: StatelessCallback[]) {\n        this.urls$ = urls$;\n        this.defaultState = defaultState;\n        this.statelessEffects = statelessEffects || [];\n        this.effects = this.putWildcardEffectsLast(effects);\n    }\n\n    protected putWildcardEffectsLast = (effects: Effect<T>[]) =>\n        [...effects.filter((e) => e.matcher.indexOf('*') < 0), ...effects.filter((e) => e.matcher.indexOf('*') >= 0)]\n\n    public getState$ = () => this.urls$.pipe(\n        map((url) => this.applyEffects(url))\n    )\n\n    protected applyEffects = (url: string[]): T => {\n        let state: T;\n        this.applyStatelessEffect(url);\n        this.effects.forEach((e) => {\n            if (this.matches(e.matcher, url)) {\n                state = state ? state : (e.cb as StatefulCallback<T>)(url);\n            }\n        });\n        return state || this.defaultState;\n    }\n\n    protected applyStatelessEffect = (url: string[]) => this.statelessEffects.forEach((cb) => cb(url));\n\n    protected matches = (matcher: string[], url: string[]): boolean => {\n        if (matcher.length === 0 || matcher.length !== url.length) {\n            return false;\n        }\n        let match = true;\n        matcher.forEach((m, i) => {\n            match = match ? url[i] === m || m === '*' : false;\n        });\n        return match;\n    }\n}",
  "usage": "enum UiState {\n    DEFAULT = 'default',\n    STATE1 = 'state1',\n    STATE2 = 'state2',\n}\n\n@Component({\n    template: `\n        <ng-container *ngIf=\"currentState$ | async as state else error\">\n            <p *ngIf=\"state === uiState.DEFAULT\">Default Display</p>\n            <p *ngIf=\"state === uiState.STATE1\">State 1</p>\n            <p *ngIf=\"state === uiState.STATE2\">State 2</p>\n        </ng-container>\n        <ng-template #error>\n            <p>Whoops</p>\n        </ng-template>\n    `\n})\nexport class ExampleComponent implements OnInit {\n    uiState = UiState;\n    currentState$: Observable<UiState>;\n\n    constructor(private stateService: PageStateFromUrlService) {\n    }\n\n    ngOnInit() {\n        this.handleUrl();\n    }\n\n    handleUrl = () => {\n        this.currentState$ = this.stateService.register(\n            UiState.DEFAULT,\n            [\n                {matcher: ['route'], cb: this.statefulEffect},\n                {matcher: ['route', '*'], cb: () => UiState.STATE2},\n            ],\n            [\n                this.statelessEffect,\n            ]);\n    }\n\n    statefulEffect = (urls: string[]) => {\n        console.log(urls);\n        return UiState.STATE1;\n    }\n\n    statelessEffect = () => console.log('url changed')\n}\n"
}