interface Effect<T> {
    matcher: string[];
    cb: StatefulCallback<T>;
}

type StatefulCallback<T> = (url: string[]) => T;
type StatelessCallback = (url?: string[]) => void;

@Injectable({
    providedIn: 'root'
})
export class PageStateFromUrlService {
    private urlHandler: UrlHandler<any>;
    private baseRoute: string;

    constructor(private router: Router) {
    }

    public register = <T>(
        defaultState: T,
        effects: Effect<T>[],
        statelessEffects?: StatelessCallback[]
    ): Observable<T> => {
        this.baseRoute = this.getBaseRoute();
        this.urlHandler = new UrlHandler<T>(this.getUrlSegments$(), defaultState, effects, statelessEffects);
        return this.urlHandler.getState$();
    }

    protected getBaseRoute = () => this.splitUrl(this.router.routerState.snapshot.url)[2];

    protected getUrlSegments$ = () => this.getUrlFromEvents$().pipe(
        map((c: string) => this.splitUrl(c)),
        map((url) => this.getChildRoutes(url)),
    )

    protected getUrlFromEvents$ = () => this.router.events.pipe(
        filter((e) => e instanceof NavigationEnd),
        map((e) => (e as NavigationEnd).url),
        startWith(this.router.routerState.snapshot.url),
    )

    protected splitUrl = (url: string): string[] => url.split('/');

    protected getChildRoutes = (url: string[]): string[] => {
        try {
            return url.slice(url.indexOf(this.baseRoute) + 1);
        } catch {
            return [''];
        }
    }
}